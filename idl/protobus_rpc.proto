// Copyright 2020 The protobus developers.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package protobus;

import "protobus_event.proto";

option cc_enable_arenas = true;

// List of possible status codes - taken from the richer error model recommended in the gRPC
// documentation, cf. https://grpc.io/docs/guides/error/
enum Code {
  OK = 0;
  CANCELLED = 1;
  UNKNOWN = 2;
  INVALID_ARGUMENT = 3;
  DEADLINE_EXCEEDED = 4;
  NOT_FOUND = 5;
  ALREADY_EXISTS = 6;
  PERMISSION_DENIED = 7;
  UNAUTHENTICATED = 16;
  RESOURCE_EXHAUSTED = 8;
  FAILED_PRECONDITION = 9;
  ABORTED = 10;
  OUT_OF_RANGE = 11;
  UNIMPLEMENTED = 12;
  INTERNAL = 13;
  UNAVAILABLE = 14;
  DATA_LOSS = 15;
}

// Return status
message Status {
  // Status code, see Code enum above for possible values
  int32 code = 1;

  // Developer-facing message
  string message = 2;
}

// Options for a subscription
message SubscriptionOptions {
  // Number of historic messages requested for each matching topic
  int32 history_depth = 1;
}

message SubscriptionRequest {
  // List of regular expressions used to match topics
  repeated string topics = 1;

  // Additional options for this subscription
  SubscriptionOptions options = 2;
}

// The main protobus publish/subscribe service
service ProtobusService {
  // Publish a stream of events
  rpc Publish(stream EncapsulatedEvent) returns (Status) {}

  // Subscribe to a stream of events
  rpc Subscribe(SubscriptionRequest) returns (stream EncapsulatedEvent) {}
}
